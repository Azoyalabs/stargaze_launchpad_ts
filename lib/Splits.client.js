"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SplitsClient = exports.SplitsQueryClient = void 0;
class SplitsQueryClient {
    constructor(client, contractAddress) {
        this.config = () => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                config: {}
            });
        });
        this.member = ({ address }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                member: {
                    address
                }
            });
        });
        this.listMembers = ({ limit, startAfter }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                list_members: {
                    limit,
                    start_after: startAfter
                }
            });
        });
        this.client = client;
        this.contractAddress = contractAddress;
        this.config = this.config.bind(this);
        this.member = this.member.bind(this);
        this.listMembers = this.listMembers.bind(this);
    }
}
exports.SplitsQueryClient = SplitsQueryClient;
class SplitsClient extends SplitsQueryClient {
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.distribute = (fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                distribute: {}
            }, fee, memo, funds);
        });
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.distribute = this.distribute.bind(this);
    }
}
exports.SplitsClient = SplitsClient;
