"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSg721MetadataOnchainReadyMutation = exports.useSg721MetadataOnchainTransferNftMutation = exports.useSg721MetadataOnchainSendNftMutation = exports.useSg721MetadataOnchainApproveMutation = exports.useSg721MetadataOnchainRevokeMutation = exports.useSg721MetadataOnchainApproveAllMutation = exports.useSg721MetadataOnchainRevokeAllMutation = exports.useSg721MetadataOnchainMintMutation = exports.useSg721MetadataOnchainBurnMutation = exports.useSg721MetadataOnchainOwnerOfQuery = exports.useSg721MetadataOnchainApprovalQuery = exports.useSg721MetadataOnchainApprovalsQuery = exports.useSg721MetadataOnchainAllOperatorsQuery = exports.useSg721MetadataOnchainNumTokensQuery = exports.useSg721MetadataOnchainContractInfoQuery = exports.useSg721MetadataOnchainNftInfoQuery = exports.useSg721MetadataOnchainAllNftInfoQuery = exports.useSg721MetadataOnchainTokensQuery = exports.useSg721MetadataOnchainAllTokensQuery = exports.useSg721MetadataOnchainMinterQuery = exports.useSg721MetadataOnchainCollectionInfoQuery = exports.sg721MetadataOnchainQueryKeys = void 0;
const react_query_1 = require("@tanstack/react-query");
exports.sg721MetadataOnchainQueryKeys = {
    contract: [{
            contract: "sg721MetadataOnchain"
        }],
    address: (contractAddress) => [Object.assign(Object.assign({}, exports.sg721MetadataOnchainQueryKeys.contract[0]), { address: contractAddress })],
    ownerOf: (contractAddress, args) => [Object.assign(Object.assign({}, exports.sg721MetadataOnchainQueryKeys.address(contractAddress)[0]), { method: "owner_of", args })],
    approval: (contractAddress, args) => [Object.assign(Object.assign({}, exports.sg721MetadataOnchainQueryKeys.address(contractAddress)[0]), { method: "approval", args })],
    approvals: (contractAddress, args) => [Object.assign(Object.assign({}, exports.sg721MetadataOnchainQueryKeys.address(contractAddress)[0]), { method: "approvals", args })],
    allOperators: (contractAddress, args) => [Object.assign(Object.assign({}, exports.sg721MetadataOnchainQueryKeys.address(contractAddress)[0]), { method: "all_operators", args })],
    numTokens: (contractAddress, args) => [Object.assign(Object.assign({}, exports.sg721MetadataOnchainQueryKeys.address(contractAddress)[0]), { method: "num_tokens", args })],
    contractInfo: (contractAddress, args) => [Object.assign(Object.assign({}, exports.sg721MetadataOnchainQueryKeys.address(contractAddress)[0]), { method: "contract_info", args })],
    nftInfo: (contractAddress, args) => [Object.assign(Object.assign({}, exports.sg721MetadataOnchainQueryKeys.address(contractAddress)[0]), { method: "nft_info", args })],
    allNftInfo: (contractAddress, args) => [Object.assign(Object.assign({}, exports.sg721MetadataOnchainQueryKeys.address(contractAddress)[0]), { method: "all_nft_info", args })],
    tokens: (contractAddress, args) => [Object.assign(Object.assign({}, exports.sg721MetadataOnchainQueryKeys.address(contractAddress)[0]), { method: "tokens", args })],
    allTokens: (contractAddress, args) => [Object.assign(Object.assign({}, exports.sg721MetadataOnchainQueryKeys.address(contractAddress)[0]), { method: "all_tokens", args })],
    minter: (contractAddress, args) => [Object.assign(Object.assign({}, exports.sg721MetadataOnchainQueryKeys.address(contractAddress)[0]), { method: "minter", args })],
    collectionInfo: (contractAddress, args) => [Object.assign(Object.assign({}, exports.sg721MetadataOnchainQueryKeys.address(contractAddress)[0]), { method: "collection_info", args })]
};
function useSg721MetadataOnchainCollectionInfoQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.sg721MetadataOnchainQueryKeys.collectionInfo(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.collectionInfo() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useSg721MetadataOnchainCollectionInfoQuery = useSg721MetadataOnchainCollectionInfoQuery;
function useSg721MetadataOnchainMinterQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.sg721MetadataOnchainQueryKeys.minter(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.minter() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useSg721MetadataOnchainMinterQuery = useSg721MetadataOnchainMinterQuery;
function useSg721MetadataOnchainAllTokensQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.sg721MetadataOnchainQueryKeys.allTokens(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client ? client.allTokens({
        limit: args.limit,
        startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useSg721MetadataOnchainAllTokensQuery = useSg721MetadataOnchainAllTokensQuery;
function useSg721MetadataOnchainTokensQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.sg721MetadataOnchainQueryKeys.tokens(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client ? client.tokens({
        limit: args.limit,
        owner: args.owner,
        startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useSg721MetadataOnchainTokensQuery = useSg721MetadataOnchainTokensQuery;
function useSg721MetadataOnchainAllNftInfoQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.sg721MetadataOnchainQueryKeys.allNftInfo(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client ? client.allNftInfo({
        includeExpired: args.includeExpired,
        tokenId: args.tokenId
    }) : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useSg721MetadataOnchainAllNftInfoQuery = useSg721MetadataOnchainAllNftInfoQuery;
function useSg721MetadataOnchainNftInfoQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.sg721MetadataOnchainQueryKeys.nftInfo(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client ? client.nftInfo({
        tokenId: args.tokenId
    }) : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useSg721MetadataOnchainNftInfoQuery = useSg721MetadataOnchainNftInfoQuery;
function useSg721MetadataOnchainContractInfoQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.sg721MetadataOnchainQueryKeys.contractInfo(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.contractInfo() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useSg721MetadataOnchainContractInfoQuery = useSg721MetadataOnchainContractInfoQuery;
function useSg721MetadataOnchainNumTokensQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.sg721MetadataOnchainQueryKeys.numTokens(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.numTokens() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useSg721MetadataOnchainNumTokensQuery = useSg721MetadataOnchainNumTokensQuery;
function useSg721MetadataOnchainAllOperatorsQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.sg721MetadataOnchainQueryKeys.allOperators(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client ? client.allOperators({
        includeExpired: args.includeExpired,
        limit: args.limit,
        owner: args.owner,
        startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useSg721MetadataOnchainAllOperatorsQuery = useSg721MetadataOnchainAllOperatorsQuery;
function useSg721MetadataOnchainApprovalsQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.sg721MetadataOnchainQueryKeys.approvals(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client ? client.approvals({
        includeExpired: args.includeExpired,
        tokenId: args.tokenId
    }) : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useSg721MetadataOnchainApprovalsQuery = useSg721MetadataOnchainApprovalsQuery;
function useSg721MetadataOnchainApprovalQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.sg721MetadataOnchainQueryKeys.approval(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client ? client.approval({
        includeExpired: args.includeExpired,
        spender: args.spender,
        tokenId: args.tokenId
    }) : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useSg721MetadataOnchainApprovalQuery = useSg721MetadataOnchainApprovalQuery;
function useSg721MetadataOnchainOwnerOfQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.sg721MetadataOnchainQueryKeys.ownerOf(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client ? client.ownerOf({
        includeExpired: args.includeExpired,
        tokenId: args.tokenId
    }) : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useSg721MetadataOnchainOwnerOfQuery = useSg721MetadataOnchainOwnerOfQuery;
function useSg721MetadataOnchainBurnMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.burn(msg, fee, memo, funds), options);
}
exports.useSg721MetadataOnchainBurnMutation = useSg721MetadataOnchainBurnMutation;
function useSg721MetadataOnchainMintMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.mint(msg, fee, memo, funds), options);
}
exports.useSg721MetadataOnchainMintMutation = useSg721MetadataOnchainMintMutation;
function useSg721MetadataOnchainRevokeAllMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.revokeAll(msg, fee, memo, funds), options);
}
exports.useSg721MetadataOnchainRevokeAllMutation = useSg721MetadataOnchainRevokeAllMutation;
function useSg721MetadataOnchainApproveAllMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.approveAll(msg, fee, memo, funds), options);
}
exports.useSg721MetadataOnchainApproveAllMutation = useSg721MetadataOnchainApproveAllMutation;
function useSg721MetadataOnchainRevokeMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.revoke(msg, fee, memo, funds), options);
}
exports.useSg721MetadataOnchainRevokeMutation = useSg721MetadataOnchainRevokeMutation;
function useSg721MetadataOnchainApproveMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.approve(msg, fee, memo, funds), options);
}
exports.useSg721MetadataOnchainApproveMutation = useSg721MetadataOnchainApproveMutation;
function useSg721MetadataOnchainSendNftMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.sendNft(msg, fee, memo, funds), options);
}
exports.useSg721MetadataOnchainSendNftMutation = useSg721MetadataOnchainSendNftMutation;
function useSg721MetadataOnchainTransferNftMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.transferNft(msg, fee, memo, funds), options);
}
exports.useSg721MetadataOnchainTransferNftMutation = useSg721MetadataOnchainTransferNftMutation;
function useSg721MetadataOnchainReadyMutation(options) {
    return (0, react_query_1.useMutation)(({ client, args: { fee, memo, funds } = {} }) => client.ready(fee, memo, funds), options);
}
exports.useSg721MetadataOnchainReadyMutation = useSg721MetadataOnchainReadyMutation;
