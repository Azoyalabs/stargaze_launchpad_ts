"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VendingMinterClient = exports.VendingMinterQueryClient = void 0;
class VendingMinterQueryClient {
    constructor(client, contractAddress) {
        this.config = () => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                config: {}
            });
        });
        this.mintableNumTokens = () => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                mintable_num_tokens: {}
            });
        });
        this.startTime = () => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                start_time: {}
            });
        });
        this.mintPrice = () => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                mint_price: {}
            });
        });
        this.mintCount = ({ address }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                mint_count: {
                    address
                }
            });
        });
        this.status = () => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                status: {}
            });
        });
        this.client = client;
        this.contractAddress = contractAddress;
        this.config = this.config.bind(this);
        this.mintableNumTokens = this.mintableNumTokens.bind(this);
        this.startTime = this.startTime.bind(this);
        this.mintPrice = this.mintPrice.bind(this);
        this.mintCount = this.mintCount.bind(this);
        this.status = this.status.bind(this);
    }
}
exports.VendingMinterQueryClient = VendingMinterQueryClient;
class VendingMinterClient extends VendingMinterQueryClient {
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.mint = (fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                mint: {}
            }, fee, memo, funds);
        });
        this.setWhitelist = ({ whitelist }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                set_whitelist: {
                    whitelist
                }
            }, fee, memo, funds);
        });
        this.purge = (fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                purge: {}
            }, fee, memo, funds);
        });
        this.updateMintPrice = ({ price }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                update_mint_price: {
                    price
                }
            }, fee, memo, funds);
        });
        this.updateStartTime = (fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                update_start_time: {}
            }, fee, memo, funds);
        });
        this.updateStartTradingTime = (fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                update_start_trading_time: {}
            }, fee, memo, funds);
        });
        this.updatePerAddressLimit = ({ perAddressLimit }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                update_per_address_limit: {
                    per_address_limit: perAddressLimit
                }
            }, fee, memo, funds);
        });
        this.mintTo = ({ recipient }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                mint_to: {
                    recipient
                }
            }, fee, memo, funds);
        });
        this.mintFor = ({ recipient, tokenId }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                mint_for: {
                    recipient,
                    token_id: tokenId
                }
            }, fee, memo, funds);
        });
        this.shuffle = (fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                shuffle: {}
            }, fee, memo, funds);
        });
        this.burnRemaining = (fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                burn_remaining: {}
            }, fee, memo, funds);
        });
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.mint = this.mint.bind(this);
        this.setWhitelist = this.setWhitelist.bind(this);
        this.purge = this.purge.bind(this);
        this.updateMintPrice = this.updateMintPrice.bind(this);
        this.updateStartTime = this.updateStartTime.bind(this);
        this.updateStartTradingTime = this.updateStartTradingTime.bind(this);
        this.updatePerAddressLimit = this.updatePerAddressLimit.bind(this);
        this.mintTo = this.mintTo.bind(this);
        this.mintFor = this.mintFor.bind(this);
        this.shuffle = this.shuffle.bind(this);
        this.burnRemaining = this.burnRemaining.bind(this);
    }
}
exports.VendingMinterClient = VendingMinterClient;
