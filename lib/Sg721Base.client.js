"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sg721BaseQueryClient = void 0;
class Sg721BaseQueryClient {
    constructor(client, contractAddress) {
        this.ownerOf = ({ includeExpired, tokenId }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                owner_of: {
                    include_expired: includeExpired,
                    token_id: tokenId
                }
            });
        });
        this.approval = ({ includeExpired, spender, tokenId }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                approval: {
                    include_expired: includeExpired,
                    spender,
                    token_id: tokenId
                }
            });
        });
        this.approvals = ({ includeExpired, tokenId }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                approvals: {
                    include_expired: includeExpired,
                    token_id: tokenId
                }
            });
        });
        this.allOperators = ({ includeExpired, limit, owner, startAfter }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                all_operators: {
                    include_expired: includeExpired,
                    limit,
                    owner,
                    start_after: startAfter
                }
            });
        });
        this.numTokens = () => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                num_tokens: {}
            });
        });
        this.contractInfo = () => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                contract_info: {}
            });
        });
        this.nftInfo = ({ tokenId }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                nft_info: {
                    token_id: tokenId
                }
            });
        });
        this.allNftInfo = ({ includeExpired, tokenId }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                all_nft_info: {
                    include_expired: includeExpired,
                    token_id: tokenId
                }
            });
        });
        this.tokens = ({ limit, owner, startAfter }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                tokens: {
                    limit,
                    owner,
                    start_after: startAfter
                }
            });
        });
        this.allTokens = ({ limit, startAfter }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                all_tokens: {
                    limit,
                    start_after: startAfter
                }
            });
        });
        this.minter = () => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                minter: {}
            });
        });
        this.collectionInfo = () => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                collection_info: {}
            });
        });
        this.client = client;
        this.contractAddress = contractAddress;
        this.ownerOf = this.ownerOf.bind(this);
        this.approval = this.approval.bind(this);
        this.approvals = this.approvals.bind(this);
        this.allOperators = this.allOperators.bind(this);
        this.numTokens = this.numTokens.bind(this);
        this.contractInfo = this.contractInfo.bind(this);
        this.nftInfo = this.nftInfo.bind(this);
        this.allNftInfo = this.allNftInfo.bind(this);
        this.tokens = this.tokens.bind(this);
        this.allTokens = this.allTokens.bind(this);
        this.minter = this.minter.bind(this);
        this.collectionInfo = this.collectionInfo.bind(this);
    }
}
exports.Sg721BaseQueryClient = Sg721BaseQueryClient;
