/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions } from "@tanstack/react-query";
import { AllNftInfoResponse, OwnerOfResponse, AllOperatorsResponse, AllTokensResponse, ApprovalResponse, ApprovalsResponse, CollectionInfoResponse, ContractInfoResponse, MinterResponse, NftInfoResponse, NumTokensResponse, TokensResponse } from "./Sg721Base.types";
import { Sg721BaseQueryClient } from "./Sg721Base.client";
export declare const sg721BaseQueryKeys: {
    contract: readonly [{
        readonly contract: "sg721Base";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "sg721Base";
    }];
    ownerOf: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "owner_of";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "sg721Base";
    }];
    approval: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "approval";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "sg721Base";
    }];
    approvals: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "approvals";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "sg721Base";
    }];
    allOperators: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "all_operators";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "sg721Base";
    }];
    numTokens: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "num_tokens";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "sg721Base";
    }];
    contractInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "contract_info";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "sg721Base";
    }];
    nftInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "nft_info";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "sg721Base";
    }];
    allNftInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "all_nft_info";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "sg721Base";
    }];
    tokens: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "tokens";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "sg721Base";
    }];
    allTokens: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "all_tokens";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "sg721Base";
    }];
    minter: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "minter";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "sg721Base";
    }];
    collectionInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "collection_info";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "sg721Base";
    }];
};
export interface Sg721BaseReactQuery<TResponse, TData = TResponse> {
    client: Sg721BaseQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface Sg721BaseCollectionInfoQuery<TData> extends Sg721BaseReactQuery<CollectionInfoResponse, TData> {
}
export declare function useSg721BaseCollectionInfoQuery<TData = CollectionInfoResponse>({ client, options }: Sg721BaseCollectionInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721BaseMinterQuery<TData> extends Sg721BaseReactQuery<MinterResponse, TData> {
}
export declare function useSg721BaseMinterQuery<TData = MinterResponse>({ client, options }: Sg721BaseMinterQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721BaseAllTokensQuery<TData> extends Sg721BaseReactQuery<AllTokensResponse, TData> {
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useSg721BaseAllTokensQuery<TData = AllTokensResponse>({ client, args, options }: Sg721BaseAllTokensQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721BaseTokensQuery<TData> extends Sg721BaseReactQuery<TokensResponse, TData> {
    args: {
        limit?: number;
        owner: string;
        startAfter?: string;
    };
}
export declare function useSg721BaseTokensQuery<TData = TokensResponse>({ client, args, options }: Sg721BaseTokensQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721BaseAllNftInfoQuery<TData> extends Sg721BaseReactQuery<AllNftInfoResponse, TData> {
    args: {
        includeExpired?: boolean;
        tokenId: string;
    };
}
export declare function useSg721BaseAllNftInfoQuery<TData = AllNftInfoResponse>({ client, args, options }: Sg721BaseAllNftInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721BaseNftInfoQuery<TData> extends Sg721BaseReactQuery<NftInfoResponse, TData> {
    args: {
        tokenId: string;
    };
}
export declare function useSg721BaseNftInfoQuery<TData = NftInfoResponse>({ client, args, options }: Sg721BaseNftInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721BaseContractInfoQuery<TData> extends Sg721BaseReactQuery<ContractInfoResponse, TData> {
}
export declare function useSg721BaseContractInfoQuery<TData = ContractInfoResponse>({ client, options }: Sg721BaseContractInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721BaseNumTokensQuery<TData> extends Sg721BaseReactQuery<NumTokensResponse, TData> {
}
export declare function useSg721BaseNumTokensQuery<TData = NumTokensResponse>({ client, options }: Sg721BaseNumTokensQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721BaseAllOperatorsQuery<TData> extends Sg721BaseReactQuery<AllOperatorsResponse, TData> {
    args: {
        includeExpired?: boolean;
        limit?: number;
        owner: string;
        startAfter?: string;
    };
}
export declare function useSg721BaseAllOperatorsQuery<TData = AllOperatorsResponse>({ client, args, options }: Sg721BaseAllOperatorsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721BaseApprovalsQuery<TData> extends Sg721BaseReactQuery<ApprovalsResponse, TData> {
    args: {
        includeExpired?: boolean;
        tokenId: string;
    };
}
export declare function useSg721BaseApprovalsQuery<TData = ApprovalsResponse>({ client, args, options }: Sg721BaseApprovalsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721BaseApprovalQuery<TData> extends Sg721BaseReactQuery<ApprovalResponse, TData> {
    args: {
        includeExpired?: boolean;
        spender: string;
        tokenId: string;
    };
}
export declare function useSg721BaseApprovalQuery<TData = ApprovalResponse>({ client, args, options }: Sg721BaseApprovalQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Sg721BaseOwnerOfQuery<TData> extends Sg721BaseReactQuery<OwnerOfResponse, TData> {
    args: {
        includeExpired?: boolean;
        tokenId: string;
    };
}
export declare function useSg721BaseOwnerOfQuery<TData = OwnerOfResponse>({ client, args, options }: Sg721BaseOwnerOfQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
