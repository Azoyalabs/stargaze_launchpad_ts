"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSplitsDistributeMutation = exports.useSplitsConfigQuery = exports.useSplitsMemberQuery = exports.useSplitsListMembersQuery = exports.splitsQueryKeys = void 0;
const react_query_1 = require("@tanstack/react-query");
exports.splitsQueryKeys = {
    contract: [{
            contract: "splits"
        }],
    address: (contractAddress) => [Object.assign(Object.assign({}, exports.splitsQueryKeys.contract[0]), { address: contractAddress })],
    config: (contractAddress, args) => [Object.assign(Object.assign({}, exports.splitsQueryKeys.address(contractAddress)[0]), { method: "config", args })],
    member: (contractAddress, args) => [Object.assign(Object.assign({}, exports.splitsQueryKeys.address(contractAddress)[0]), { method: "member", args })],
    listMembers: (contractAddress, args) => [Object.assign(Object.assign({}, exports.splitsQueryKeys.address(contractAddress)[0]), { method: "list_members", args })]
};
function useSplitsListMembersQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.splitsQueryKeys.listMembers(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client ? client.listMembers({
        limit: args.limit,
        startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useSplitsListMembersQuery = useSplitsListMembersQuery;
function useSplitsMemberQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.splitsQueryKeys.member(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client ? client.member({
        address: args.address
    }) : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useSplitsMemberQuery = useSplitsMemberQuery;
function useSplitsConfigQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.splitsQueryKeys.config(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useSplitsConfigQuery = useSplitsConfigQuery;
function useSplitsDistributeMutation(options) {
    return (0, react_query_1.useMutation)(({ client, args: { fee, memo, funds } = {} }) => client.distribute(fee, memo, funds), options);
}
exports.useSplitsDistributeMutation = useSplitsDistributeMutation;
