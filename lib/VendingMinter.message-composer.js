"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.VendingMinterMessageComposer = void 0;
const tx_1 = require("cosmjs-types/cosmwasm/wasm/v1/tx");
const encoding_1 = require("@cosmjs/encoding");
class VendingMinterMessageComposer {
    constructor(sender, contractAddress) {
        this.mint = (funds) => {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: this.sender,
                    contract: this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        mint: {}
                    })),
                    funds
                })
            };
        };
        this.setWhitelist = ({ whitelist }, funds) => {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: this.sender,
                    contract: this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        set_whitelist: {
                            whitelist
                        }
                    })),
                    funds
                })
            };
        };
        this.purge = (funds) => {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: this.sender,
                    contract: this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        purge: {}
                    })),
                    funds
                })
            };
        };
        this.updateMintPrice = ({ price }, funds) => {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: this.sender,
                    contract: this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        update_mint_price: {
                            price
                        }
                    })),
                    funds
                })
            };
        };
        this.updateStartTime = (funds) => {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: this.sender,
                    contract: this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        update_start_time: {}
                    })),
                    funds
                })
            };
        };
        this.updateStartTradingTime = (funds) => {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: this.sender,
                    contract: this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        update_start_trading_time: {}
                    })),
                    funds
                })
            };
        };
        this.updatePerAddressLimit = ({ perAddressLimit }, funds) => {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: this.sender,
                    contract: this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        update_per_address_limit: {
                            per_address_limit: perAddressLimit
                        }
                    })),
                    funds
                })
            };
        };
        this.mintTo = ({ recipient }, funds) => {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: this.sender,
                    contract: this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        mint_to: {
                            recipient
                        }
                    })),
                    funds
                })
            };
        };
        this.mintFor = ({ recipient, tokenId }, funds) => {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: this.sender,
                    contract: this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        mint_for: {
                            recipient,
                            token_id: tokenId
                        }
                    })),
                    funds
                })
            };
        };
        this.shuffle = (funds) => {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: this.sender,
                    contract: this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        shuffle: {}
                    })),
                    funds
                })
            };
        };
        this.burnRemaining = (funds) => {
            return {
                typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: this.sender,
                    contract: this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        burn_remaining: {}
                    })),
                    funds
                })
            };
        };
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.mint = this.mint.bind(this);
        this.setWhitelist = this.setWhitelist.bind(this);
        this.purge = this.purge.bind(this);
        this.updateMintPrice = this.updateMintPrice.bind(this);
        this.updateStartTime = this.updateStartTime.bind(this);
        this.updateStartTradingTime = this.updateStartTradingTime.bind(this);
        this.updatePerAddressLimit = this.updatePerAddressLimit.bind(this);
        this.mintTo = this.mintTo.bind(this);
        this.mintFor = this.mintFor.bind(this);
        this.shuffle = this.shuffle.bind(this);
        this.burnRemaining = this.burnRemaining.bind(this);
    }
}
exports.VendingMinterMessageComposer = VendingMinterMessageComposer;
