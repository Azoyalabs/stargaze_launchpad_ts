"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useVendingMinterMintMutation = exports.useVendingMinterSetWhitelistMutation = exports.useVendingMinterPurgeMutation = exports.useVendingMinterUpdateMintPriceMutation = exports.useVendingMinterUpdateStartTimeMutation = exports.useVendingMinterUpdateStartTradingTimeMutation = exports.useVendingMinterUpdatePerAddressLimitMutation = exports.useVendingMinterMintToMutation = exports.useVendingMinterMintForMutation = exports.useVendingMinterShuffleMutation = exports.useVendingMinterBurnRemainingMutation = exports.useVendingMinterConfigQuery = exports.useVendingMinterMintableNumTokensQuery = exports.useVendingMinterStartTimeQuery = exports.useVendingMinterMintPriceQuery = exports.useVendingMinterMintCountQuery = exports.useVendingMinterStatusQuery = exports.vendingMinterQueryKeys = void 0;
const react_query_1 = require("@tanstack/react-query");
exports.vendingMinterQueryKeys = {
    contract: [
        {
            contract: "vendingMinter",
        },
    ],
    address: (contractAddress) => [
        Object.assign(Object.assign({}, exports.vendingMinterQueryKeys.contract[0]), { address: contractAddress }),
    ],
    config: (contractAddress, args) => [
        Object.assign(Object.assign({}, exports.vendingMinterQueryKeys.address(contractAddress)[0]), { method: "config", args }),
    ],
    mintableNumTokens: (contractAddress, args) => [
        Object.assign(Object.assign({}, exports.vendingMinterQueryKeys.address(contractAddress)[0]), { method: "mintable_num_tokens", args }),
    ],
    startTime: (contractAddress, args) => [
        Object.assign(Object.assign({}, exports.vendingMinterQueryKeys.address(contractAddress)[0]), { method: "start_time", args }),
    ],
    mintPrice: (contractAddress, args) => [
        Object.assign(Object.assign({}, exports.vendingMinterQueryKeys.address(contractAddress)[0]), { method: "mint_price", args }),
    ],
    mintCount: (contractAddress, args) => [
        Object.assign(Object.assign({}, exports.vendingMinterQueryKeys.address(contractAddress)[0]), { method: "mint_count", args }),
    ],
    status: (contractAddress, args) => [
        Object.assign(Object.assign({}, exports.vendingMinterQueryKeys.address(contractAddress)[0]), { method: "status", args }),
    ],
};
function useVendingMinterStatusQuery({ client, options, }) {
    return (0, react_query_1.useQuery)(exports.vendingMinterQueryKeys.status(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.status() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useVendingMinterStatusQuery = useVendingMinterStatusQuery;
function useVendingMinterMintCountQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(exports.vendingMinterQueryKeys.mintCount(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client
        ? client.mintCount({
            address: args.address,
        })
        : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useVendingMinterMintCountQuery = useVendingMinterMintCountQuery;
function useVendingMinterMintPriceQuery({ client, options, }) {
    return (0, react_query_1.useQuery)(exports.vendingMinterQueryKeys.mintPrice(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.mintPrice() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useVendingMinterMintPriceQuery = useVendingMinterMintPriceQuery;
function useVendingMinterStartTimeQuery({ client, options, }) {
    return (0, react_query_1.useQuery)(exports.vendingMinterQueryKeys.startTime(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.startTime() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useVendingMinterStartTimeQuery = useVendingMinterStartTimeQuery;
function useVendingMinterMintableNumTokensQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.vendingMinterQueryKeys.mintableNumTokens(client === null || client === void 0 ? void 0 : client.contractAddress), () => client
        ? client.mintableNumTokens()
        : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useVendingMinterMintableNumTokensQuery = useVendingMinterMintableNumTokensQuery;
function useVendingMinterConfigQuery({ client, options, }) {
    return (0, react_query_1.useQuery)(exports.vendingMinterQueryKeys.config(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useVendingMinterConfigQuery = useVendingMinterConfigQuery;
function useVendingMinterBurnRemainingMutation(options) {
    return (0, react_query_1.useMutation)(({ client, args: { fee, memo, funds } = {} }) => client.burnRemaining(fee, memo, funds), options);
}
exports.useVendingMinterBurnRemainingMutation = useVendingMinterBurnRemainingMutation;
function useVendingMinterShuffleMutation(options) {
    return (0, react_query_1.useMutation)(({ client, args: { fee, memo, funds } = {} }) => client.shuffle(fee, memo, funds), options);
}
exports.useVendingMinterShuffleMutation = useVendingMinterShuffleMutation;
function useVendingMinterMintForMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.mintFor(msg, fee, memo, funds), options);
}
exports.useVendingMinterMintForMutation = useVendingMinterMintForMutation;
function useVendingMinterMintToMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.mintTo(msg, fee, memo, funds), options);
}
exports.useVendingMinterMintToMutation = useVendingMinterMintToMutation;
function useVendingMinterUpdatePerAddressLimitMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.updatePerAddressLimit(msg, fee, memo, funds), options);
}
exports.useVendingMinterUpdatePerAddressLimitMutation = useVendingMinterUpdatePerAddressLimitMutation;
function useVendingMinterUpdateStartTradingTimeMutation(options) {
    return (0, react_query_1.useMutation)(({ client, args: { fee, memo, funds } = {} }) => client.UpdateStartTradingTime(fee, memo, funds), options);
}
exports.useVendingMinterUpdateStartTradingTimeMutation = useVendingMinterUpdateStartTradingTimeMutation;
function useVendingMinterUpdateStartTimeMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.updateStartTime(msg, fee, memo, funds), options);
}
exports.useVendingMinterUpdateStartTimeMutation = useVendingMinterUpdateStartTimeMutation;
function useVendingMinterUpdateMintPriceMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.updateMintPrice(msg, fee, memo, funds), options);
}
exports.useVendingMinterUpdateMintPriceMutation = useVendingMinterUpdateMintPriceMutation;
function useVendingMinterPurgeMutation(options) {
    return (0, react_query_1.useMutation)(({ client, args: { fee, memo, funds } = {} }) => client.purge(fee, memo, funds), options);
}
exports.useVendingMinterPurgeMutation = useVendingMinterPurgeMutation;
function useVendingMinterSetWhitelistMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.setWhitelist(msg, fee, memo, funds), options);
}
exports.useVendingMinterSetWhitelistMutation = useVendingMinterSetWhitelistMutation;
function useVendingMinterMintMutation(options) {
    return (0, react_query_1.useMutation)(({ client, args: { fee, memo, funds } = {} }) => client.mint(fee, memo, funds), options);
}
exports.useVendingMinterMintMutation = useVendingMinterMintMutation;
