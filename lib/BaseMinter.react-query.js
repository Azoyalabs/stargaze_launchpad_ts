"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useBaseMinterMintMutation = exports.useBaseMinterUpdateStartTradingTimeMutation = exports.useBaseMinterConfigQuery = exports.useBaseMinterStatusQuery = exports.baseMinterQueryKeys = void 0;
const react_query_1 = require("@tanstack/react-query");
exports.baseMinterQueryKeys = {
    contract: [
        {
            contract: "baseMinter",
        },
    ],
    address: (contractAddress) => [Object.assign(Object.assign({}, exports.baseMinterQueryKeys.contract[0]), { address: contractAddress })],
    config: (contractAddress, args) => [
        Object.assign(Object.assign({}, exports.baseMinterQueryKeys.address(contractAddress)[0]), { method: "config", args }),
    ],
    status: (contractAddress, args) => [
        Object.assign(Object.assign({}, exports.baseMinterQueryKeys.address(contractAddress)[0]), { method: "status", args }),
    ],
};
function useBaseMinterStatusQuery({ client, options, }) {
    return (0, react_query_1.useQuery)(exports.baseMinterQueryKeys.status(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.status() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useBaseMinterStatusQuery = useBaseMinterStatusQuery;
function useBaseMinterConfigQuery({ client, options, }) {
    return (0, react_query_1.useQuery)(exports.baseMinterQueryKeys.config(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useBaseMinterConfigQuery = useBaseMinterConfigQuery;
function useBaseMinterUpdateStartTradingTimeMutation(options) {
    return (0, react_query_1.useMutation)(({ client, args: { fee, memo, funds } = {} }) => client.UpdateStartTradingTime(fee, memo, funds), options);
}
exports.useBaseMinterUpdateStartTradingTimeMutation = useBaseMinterUpdateStartTradingTimeMutation;
function useBaseMinterMintMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.mint(msg, fee, memo, funds), options);
}
exports.useBaseMinterMintMutation = useBaseMinterMintMutation;
